fileFormatVersion: 2
guid: da6ea5e82245b224c956b7c505e38117
importerOverride: ZEPETO.Script.Compiler:ZEPETO.Script:TypescriptAssetImporter
ScriptedImporter:
  internalIDToNameTable: []
  externalObjects: {}
  serializedVersion: 2
  userData: 
  assetBundleName: 
  assetBundleVariant: 
  script: {fileID: -1123457745, guid: 54cf806323ffe4418a4ce4cc63fe6b9d, type: 3}
  isAssemblyDeclarations: 0
  assembly: 
  generateAllTypes: 1
  types: []
  generateWrapper: 0
  overrideWrapperTypes: 0
  wrapperTypes: []
  WrapperFilters: []
  wrapperOutputDirectory: Generated
  compiledResult: '{"source":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\",
    { value: true });\r\nconst ZEPETO_Script_1 = require(\"ZEPETO.Script\");\r\nconst
    ZEPETO_World_1 = require(\"ZEPETO.World\");\r\nconst UnityEngine_1 = require(\"UnityEngine\");\r\nconst
    ZEPETO_Module_Social_1 = require(\"ZEPETO.Module.Social\");\r\n// You can use
    this class to use thumbnails of your followings in the game\r\n// This class
    will be the Thumbnail generator for the cards based on the friend list\r\nclass
    ThumbnailsCreator extends ZEPETO_Script_1.ZepetoScriptBehaviour {\r\n    constructor()
    {\r\n        super(...arguments);\r\n        this.spritesToLoad = 0; // Variable
    to know the amount of sprites that has to be loaded\r\n        this.spritesLoaded
    = false; // Flag to know if the sprites are all loaded\r\n    }\r\n    GetUserSprites()
    {\r\n        return this.userSprites;\r\n    }\r\n    // Start is called on the
    frame when a script is enabled just before any of the Update methods are called
    the first time\r\n    Start() {\r\n        // Initialize the arrays\r\n       
    this.usersIds = [];\r\n        this.userSprites = [];\r\n        // Call to the
    coroutine to get the sprites of the follows\r\n        this.StartCoroutine(this.CreateFollowingSprites());\r\n   
    }\r\n    // This function creates the sprite of the user passed by parameter
    and returns it\r\n    GetUserSprite(id = null) {\r\n        // Here we use the
    ZepetoWorldHelper to get a texture from the user id https://docs.zepeto.me/studio-world/docs/user_information\r\n       
    ZEPETO_World_1.ZepetoWorldHelper.GetProfileTexture(id, (texture) => {\r\n           
    // We save the sprite getting it from the GetSprite function\r\n            let
    userSprite = this.GetSprite(texture);\r\n            // Then push the sprite
    to the userSprites array\r\n            this.userSprites.push(userSprite);\r\n           
    // Rest one sprite to load\r\n            this.spritesToLoad--;\r\n           
    // Check if all the sprites are loaded and change the flag\r\n            if
    (this.spritesToLoad == 0)\r\n                this.spritesLoaded = true;\r\n           
    // And return it\r\n            return userSprite;\r\n            // If you get
    an error\r\n        }, (error) => {\r\n            // Then log the error on the
    console\r\n            console.log(error);\r\n            // Rest one sprite
    to load\r\n            this.spritesToLoad--;\r\n        });\r\n        // And
    return null when you got an error\r\n        return null;\r\n    }\r\n    //
    This function create and return an sprite receiving a texture as parameter\r\n   
    GetSprite(texture) {\r\n        // Save the Rect creating it by the size of the
    texture\r\n        let rect = new UnityEngine_1.Rect(0, 0, texture.width, texture.height);\r\n       
    // Then return the creation of the sprite based on the texture\r\n        return
    UnityEngine_1.Sprite.Create(texture, rect, new UnityEngine_1.Vector2(0.5, 0.5));\r\n   
    }\r\n    // This function send a request to get the following list of the user
    and create the sprites with them\r\n    *CreateFollowingSprites() {\r\n       
    // There we make a request to get the following list\r\n        var request =
    ZEPETO_Module_Social_1.SocialService.GetMyFollowingListAsync();\r\n        //
    We wait until the request finish \r\n        yield new UnityEngine_1.WaitUntil(()
    => false == request.keepWaiting);\r\n        // Then if the request is succsess\r\n       
    if (request.responseData.isSuccess) {\r\n            // We save the list of the
    users on the variable\r\n            var userList = request.responseData.users;\r\n           
    // Then we get a sprite for each userid\r\n            userList.forEach(user
    => {\r\n                // Add one sprite to load\r\n                this.spritesToLoad++;\r\n               
    // Call to the function to create the sprite passing the userId\r\n               
    this.GetUserSprite(user.userId);\r\n            });\r\n        }\r\n        else
    {\r\n            // If the request fails, print the error message.\r\n           
    console.log(`GetFollowerList Failed : ${request.responseData.message}`);\r\n       
    }\r\n    }\r\n}\r\nexports.default = ThumbnailsCreator;\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGh1bWJuYWlsc0NyZWF0b3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJUaHVtYm5haWxzQ3JlYXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLGlEQUFzRDtBQUN0RCwrQ0FBaUQ7QUFDakQsNkNBQW1GO0FBQ25GLCtEQUFxRDtBQUVyRCwwRUFBMEU7QUFDMUUsb0ZBQW9GO0FBQ3BGLE1BQXFCLGlCQUFrQixTQUFRLHFDQUFxQjtJQUFwRTs7UUFJWSxrQkFBYSxHQUFXLENBQUMsQ0FBQyxDQUFDLCtEQUErRDtRQUMzRixrQkFBYSxHQUFTLEtBQUssQ0FBQyxDQUFDLDZDQUE2QztJQWtGckYsQ0FBQztJQWhGVSxjQUFjO1FBQ2pCLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQztJQUM1QixDQUFDO0lBRUQsd0hBQXdIO0lBQ3hILEtBQUs7UUFDRCx3QkFBd0I7UUFDeEIsSUFBSSxDQUFDLFFBQVEsR0FBRyxFQUFFLENBQUM7UUFDbkIsSUFBSSxDQUFDLFdBQVcsR0FBRyxFQUFFLENBQUM7UUFFdEIsMERBQTBEO1FBQzFELElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLHNCQUFzQixFQUFFLENBQUMsQ0FBQztJQUN2RCxDQUFDO0lBRUQsa0ZBQWtGO0lBQ2xGLGFBQWEsQ0FBQyxLQUFhLElBQUk7UUFDM0IsZ0lBQWdJO1FBQ2hJLGdDQUFpQixDQUFDLGlCQUFpQixDQUFDLEVBQUUsRUFBRSxDQUFDLE9BQWdCLEVBQUUsRUFBRTtZQUV6RCw0REFBNEQ7WUFDNUQsSUFBSSxVQUFVLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUV6QyxnREFBZ0Q7WUFDaEQsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7WUFFbEMsMEJBQTBCO1lBQzFCLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztZQUVyQiwwREFBMEQ7WUFDMUQsSUFBSSxJQUFJLENBQUMsYUFBYSxJQUFJLENBQUM7Z0JBQUUsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUM7WUFFdkQsZ0JBQWdCO1lBQ2hCLE9BQU8sVUFBVSxDQUFDO1lBRWxCLHNCQUFzQjtRQUMxQixDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsRUFBRTtZQUNULG9DQUFvQztZQUNwQyxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ25CLDBCQUEwQjtZQUMxQixJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7UUFDekIsQ0FBQyxDQUFDLENBQUM7UUFDSCx3Q0FBd0M7UUFDeEMsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUVELDZFQUE2RTtJQUM3RSxTQUFTLENBQUMsT0FBZ0I7UUFDdEIsdURBQXVEO1FBQ3ZELElBQUksSUFBSSxHQUFTLElBQUksa0JBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQy9ELDhEQUE4RDtRQUM5RCxPQUFPLG9CQUFNLENBQUMsTUFBTSxDQUFDLE9BQW9CLEVBQUUsSUFBSSxFQUFFLElBQUkscUJBQU8sQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUM1RSxDQUFDO0lBRUQsc0dBQXNHO0lBQ3RHLENBQUMsc0JBQXNCO1FBQ25CLG9EQUFvRDtRQUNwRCxJQUFJLE9BQU8sR0FBRyxvQ0FBYSxDQUFDLHVCQUF1QixFQUFFLENBQUM7UUFFdEQsb0NBQW9DO1FBQ3BDLE1BQU0sSUFBSSx1QkFBUyxDQUFDLEdBQUcsRUFBRSxDQUFDLEtBQUssSUFBSSxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUM7UUFFeEQsa0NBQWtDO1FBQ2xDLElBQUksT0FBTyxDQUFDLFlBQVksQ0FBQyxTQUFTLEVBQUU7WUFDaEMsZ0RBQWdEO1lBQ2hELElBQUksUUFBUSxHQUFHLE9BQU8sQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDO1lBRTFDLHVDQUF1QztZQUN2QyxRQUFRLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFO2dCQUNwQix5QkFBeUI7Z0JBQ3pCLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztnQkFFckIsK0RBQStEO2dCQUMvRCxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUNwQyxDQUFDLENBQUMsQ0FBQztTQUVOO2FBQU07WUFDSCxpREFBaUQ7WUFDakQsT0FBTyxDQUFDLEdBQUcsQ0FBQyw0QkFBNEIsT0FBTyxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO1NBQzNFO0lBQ0wsQ0FBQztDQUNKO0FBdkZELG9DQXVGQyJ9","assetPath":"Assets/FindAPair_Template/_Scripts/ThumbnailsCreator.ts","manifest":{"properties":[{"assembly":"mscorlib","name":"spritesLoaded","type":"System.Boolean","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[]}],"name":"ThumbnailsCreator","description":"","hasAnimatorMove":false},"isCompiled":true}'
  typescriptHash: 1ddc9cd5e92e08159ae5e51f7819c6b2
  onlyWriteTrigger: 0
