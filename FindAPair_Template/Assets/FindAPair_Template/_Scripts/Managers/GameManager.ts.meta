fileFormatVersion: 2
guid: 973fbf2751fb4654cb5d2f8acdb422a6
importerOverride: ZEPETO.Script.Compiler:ZEPETO.Script:TypescriptAssetImporter
ScriptedImporter:
  internalIDToNameTable: []
  externalObjects: {}
  serializedVersion: 2
  userData: 
  assetBundleName: 
  assetBundleVariant: 
  script: {fileID: -1123457745, guid: 54cf806323ffe4418a4ce4cc63fe6b9d, type: 3}
  isAssemblyDeclarations: 0
  assembly: 
  generateAllTypes: 1
  types: []
  generateWrapper: 0
  overrideWrapperTypes: 0
  wrapperTypes: []
  WrapperFilters: []
  wrapperOutputDirectory: Generated
  compiledResult: '{"source":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\",
    { value: true });\r\nconst UnityEngine_1 = require(\"UnityEngine\");\r\nconst
    ZEPETO_Script_1 = require(\"ZEPETO.Script\");\r\nconst UICard_1 = require(\"../UICard\");\r\nconst
    UIManager_1 = require(\"./UIManager\");\r\nconst ThumbnailsCreator_1 = require(\"../ThumbnailsCreator\");\r\n//
    This class is responsible for handling everything related to the gameplay of
    the game, calling other managers if necessary\r\nclass GameManager extends ZEPETO_Script_1.ZepetoScriptBehaviour
    {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.pairsFounded
    = 0; // This variable saves the amount of pairs that have found the player\r\n       
    this.cardsCreated = false; // Flag to know if all the cards are created\r\n       
    this.cards = new Map(); // This variables saves the created cards for the use
    on the game matrix\r\n    }\r\n    // This function set the pairAmount variable
    and create a new matrix\r\n    SetPairAmount(amount) {\r\n        // Set the
    pair amount on his variable\r\n        this.pairAmount = amount;\r\n        //
    Call to the function to destroy the actual matrix\r\n        this.MatrixDestruction();\r\n       
    // Call to the function to create a new matrix\r\n        this.MatrixCreation();\r\n   
    }\r\n    // This function return the pair amount number variable\r\n    GetPairAmount()
    {\r\n        return this.pairAmount;\r\n    }\r\n    // Awake is called when
    an enabled script instance is being loaded.\r\n    Awake() {\r\n        // Singleton
    pattern\r\n        if (ZEPETO_Script_1.ZepetoScriptBehaviour.op_Inequality(GameManager.instance,
    null))\r\n            UnityEngine_1.GameObject.Destroy(this.gameObject);\r\n       
    else\r\n            GameManager.instance = this;\r\n        // Array initialization\r\n       
    this.selections = [];\r\n        this.rows = [];\r\n    }\r\n    // Start is
    called on the frame when a script is enabled just before any of the Update methods
    are called the first time\r\n    Start() {\r\n        // Get the script of the
    thumbnails creator\r\n        this.thumbnailsCreator = this.thumbnailsCreatorObj.GetComponent($typeof(ThumbnailsCreator_1.default));\r\n       
    // Call to the coroutine to create the base cards that can be created on a game\r\n       
    this.StartCoroutine(this.CardsCreation());\r\n    }\r\n    // This function create
    a card for each sprite saved on the variable \"sprites\"\r\n    *CardsCreation()
    {\r\n        // First we clear the cards created or saved in the cards map\r\n       
    this.cards.clear();\r\n        // First we create a counter\r\n        let counter
    = 0;\r\n        // Check if we want to use the thumbnails\r\n        if (this.useThumbnails)
    {\r\n            // Check if the sprites \r\n            if (!this.thumbnailsCreator.spritesLoaded)
    {\r\n                // If not wait until all the thumnbs are created\r\n               
    yield new UnityEngine_1.WaitUntil(() => this.thumbnailsCreator.spritesLoaded
    == true);\r\n            }\r\n            // Then create a variable to save the
    user sprites\r\n            var thumbnails = this.thumbnailsCreator.GetUserSprites();\r\n           
    // Load all the thumbs on the cards\r\n            thumbnails.forEach(thumb =>
    {\r\n                // Set a new card on the \"cards\" map with the counter
    as ID and the thumnbnail\r\n                this.cards.set(counter, thumb);\r\n               
    // increase te counter\r\n                counter++;\r\n            });\r\n       
    }\r\n        // Then foreach sprite\r\n        this.sprites.forEach(sprite =>
    {\r\n            // Set a new card on the \"cards\" map with the counter as ID
    and the sprite\r\n            this.cards.set(counter, sprite);\r\n           
    // increase te counter\r\n            counter++;\r\n        });\r\n        this.cardsCreated
    = true;\r\n    }\r\n    // This function resets the matrix, setting the variable
    \"founded\" for the cards to false and calling the \"ShuffleMatrix\" function\r\n   
    ResetMatrix() {\r\n        // First get all the UICards that are children of
    the tableParent\r\n        const cards = this.tableParent.GetComponentsInChildren($typeof(UICard_1.default),
    true);\r\n        // Then foreach card\r\n        cards.forEach(card => {\r\n           
    // Call the function SetFoundedCard and send false to reset the card\r\n           
    card.SetFoundedCard(false);\r\n        });\r\n        // Call to the function
    ShuffleMatrix\r\n        this.ShuffleMatrix();\r\n        // And reset the variables
    of the game to 0\r\n        this.pairsFounded = 0;\r\n        this.tries = 0;\r\n   
    }\r\n    // This function destroys the matrix\r\n    MatrixDestruction() {\r\n       
    // For each row on the rows array, destroy the row\r\n        for (let i = 0;
    i < this.rows.length; i++)\r\n            UnityEngine_1.GameObject.Destroy(this.rows[i]);\r\n   
    }\r\n    // This function create the matrix for the game\r\n    MatrixCreation()
    {\r\n        // First limit the pair amount getting the limit from the LimitPairAmount
    function\r\n        this.pairAmount = this.LimitPairAmount(this.pairAmount);\r\n       
    // Then set a widht of every row getting the value from the function DeterminateWidth
    \r\n        let width = this.DeterminateWidth();\r\n        // Let a variable
    to save the amount of cards to create this game\r\n        let cardsToCreate
    = this.pairAmount * 2;\r\n        // Create the first row getting it from the
    CreateRow function\r\n        let row = this.CreateRow();\r\n        // Set a
    variable to know who is the row parent\r\n        let rowParent = row.transform;\r\n       
    // Create a x variable to know in wich place will stay the new card\r\n       
    let x = 0;\r\n        // And set a cardId to start\r\n        let cardId = 0;\r\n       
    // Create an array to save the cards that will be created\r\n        let cardScriptList
    = [];\r\n        // While we have cards to create\r\n        while (cardsToCreate
    > 0) {\r\n            // Check if x is equal to width and if there is no more
    cards to create\r\n            if (x == width && cardsToCreate > 0) {\r\n               
    // Create a new row\r\n                row = this.CreateRow();\r\n               
    // And set the new parent\r\n                rowParent = row.transform;\r\n               
    // Reset the x to 0\r\n                x = 0;\r\n            }\r\n           
    // if not\r\n            // create a new card instantiating a card prefab on
    the rowParent and saving it into a variable\r\n            let newCard = UnityEngine_1.GameObject.Instantiate(this.cardPrefab,
    rowParent);\r\n            // Then save the card script(UICard) into a variable\r\n           
    let newCardScript = newCard.GetComponent($typeof(UICard_1.default));\r\n           
    // Save the script in the array to shuffle it later\r\n            cardScriptList.push(newCardScript);\r\n           
    // Check if the number of cards is even, and if it''s not the first card, then
    add 1 to the variable \"cardId\"\r\n            if ((cardsToCreate % 2) == 0
    && cardsToCreate != this.pairAmount * 2)\r\n                cardId++;\r\n           
    // Check if the cardId if greater or equal to the cards map lenght and set it
    to 0 to create again from 0\r\n            if (cardId >= this.cards.size)\r\n               
    cardId = 0;\r\n            // Then save the id on the UICard script saved\r\n           
    newCardScript.id = cardId;\r\n            // Then save the showingSprite of the
    script getting it from the cards map by the id\r\n            newCardScript.showingSprite
    = this.cards.get(cardId);\r\n            // Rest 1 to cards to create\r\n           
    cardsToCreate--;\r\n            // Add 1 to x\r\n            x++;\r\n       
    }\r\n        // When the cards are created update the pairs founded to the new
    amount\r\n        // Call to the UpdatePairsFounded on UIManager\r\n        UIManager_1.default.instance.UpdatePairsFounded(this.pairsFounded,
    this.pairAmount);\r\n        // Then Suffle the matrix to start the game\r\n       
    this.ShuffleMatrix(cardScriptList);\r\n    }\r\n    // This function shuffles
    the matrix to randomize the pairs\r\n    ShuffleMatrix(cards = null) {\r\n       
    // If not receive the array of cards then get the cards from the tableparent
    childs\r\n        if (cards == null)\r\n            cards = this.tableParent.GetComponentsInChildren($typeof(UICard_1.default),
    true);\r\n        // Randomly shuffle the indexes\r\n        for (let i = 0;
    i < cards.length; i++) {\r\n            // First we save the actual card data
    in variables\r\n            let actualCardId = cards[i].id;\r\n            let
    actualCardSprite = cards[i].showingSprite;\r\n            // We create a random
    number to select another card to swap\r\n            let randomCard = UnityEngine_1.Random.Range(0,
    cards.length - 1);\r\n            // If the result is a float number, we change
    it to int\r\n            randomCard = UnityEngine_1.Mathf.FloorToInt(randomCard);\r\n           
    // Then we save the data of the random card in other variables\r\n           
    let randomCardId = cards[randomCard].id;\r\n            let randomCardSprite
    = cards[randomCard].showingSprite;\r\n            // Then we swap the values
    of the actual card\r\n            cards[i].id = randomCardId;\r\n           
    cards[i].showingSprite = randomCardSprite;\r\n            // With the values
    of the random card\r\n            cards[randomCard].id = actualCardId;\r\n           
    cards[randomCard].showingSprite = actualCardSprite;\r\n        }\r\n        //
    cards.forEach( card => {\r\n        //     card.ShowCard( true );\r\n       
    // } );\r\n    }\r\n    // This function creates a row in the table parent with
    the row prefab\r\n    CreateRow() {\r\n        // create a object to save the
    instantiated prefab of the row in the table parent\r\n        let obj = UnityEngine_1.GameObject.Instantiate(this.rowPrefab,
    this.tableParent);\r\n        // Save the object on the rows array\r\n       
    this.rows.push(obj);\r\n        return obj;\r\n    }\r\n    // This function
    returns the number of the limit of pairs to create to dont broke the game\r\n   
    LimitPairAmount(limit) {\r\n        // If the limit (parameter) is less or equal
    to 1 the set the limit in 2\r\n        if (limit <= 1)\r\n            limit =
    2;\r\n        // If the limit (parameter) is greater than 16 the set the limit
    in 16\r\n        if (limit > 16)\r\n            limit = 16;\r\n        return
    limit;\r\n    }\r\n    // This function determines the \"width\" based on the
    number of pairs to display\r\n    DeterminateWidth() {\r\n        // First create
    the width on 0\r\n        let width = 0;\r\n        // If the pair amount is
    less than 6 then the width is equal to pair amount\r\n        if (this.pairAmount
    < 6)\r\n            width = this.pairAmount;\r\n        // If the pair amount
    is greater or equal to 6 then the width is equal to pair amount / 2\r\n       
    if (this.pairAmount >= 6)\r\n            width = this.pairAmount / 2;\r\n       
    // If the pair amount is greater than 12 then the width is equal to 8\r\n       
    if (this.pairAmount > 12)\r\n            width = 8;\r\n        // Then round
    it to int to avoid float numbers\r\n        width = UnityEngine_1.Mathf.RoundToInt(width);\r\n       
    return width;\r\n    }\r\n    // This function get a card to select and push
    it into the selections and if the selections are 2 then compare them\r\n    SelectCard(card)
    {\r\n        // Push the card passed by parameter into the selections array\r\n       
    this.selections.push(card);\r\n        // Check if the selections are already
    2 then start the corountine to compare them\r\n        if (this.selections.length
    >= 2)\r\n            this.StartCoroutine(this.CompareSelections());\r\n    }\r\n   
    // This corountine compare both of the selections and work in based of that\r\n   
    *CompareSelections() {\r\n        // increase the amount of tries\r\n       
    this.tries++;\r\n        // Show the blocker calling to the ShowBlocker function
    in the UIManager\r\n        UIManager_1.default.instance.ShowBlocker(true);\r\n       
    // Check if the selections have the same id\r\n        if (this.selections[0].id
    == this.selections[1].id) {\r\n            // Set both cards selected to founded
    calling at their SetFoundedCard function\r\n            this.selections[0].SetFoundedCard(true);\r\n           
    this.selections[1].SetFoundedCard(true);\r\n            // Increase the amount
    of pairs founded\r\n            this.pairsFounded++;\r\n            // Call to
    the UpdatePairsFounded in the UIManager\r\n            UIManager_1.default.instance.UpdatePairsFounded(this.pairsFounded,
    this.pairAmount);\r\n            // Wait 1 second\r\n            yield new UnityEngine_1.WaitForSeconds(1);\r\n           
    // Clean the selections array\r\n            for (let i = 0; i <= this.selections.length;
    i++)\r\n                this.selections.pop();\r\n            // Then start the
    coroutine to check if the player won\r\n            this.StartCoroutine(this.CheckForWin());\r\n       
    }\r\n        else {\r\n            // Wait 1 second\r\n            yield new
    UnityEngine_1.WaitForSeconds(1);\r\n            // The hide the cards calling
    to the function ShowCard on false\r\n            this.selections[0].ShowCard(false);\r\n           
    this.selections[1].ShowCard(false);\r\n            // Clean the selections array\r\n           
    for (let i = 0; i <= this.selections.length; i++)\r\n                this.selections.pop();\r\n           
    // Call to fhe function ShowBlocker in the UIManager\r\n            UIManager_1.default.instance.ShowBlocker(false);\r\n       
    }\r\n    }\r\n    // This function checks if the player has founded all the cards\r\n   
    *CheckForWin() {\r\n        // Check if the pairs founced are equal to the pairs
    amount\r\n        if (this.pairsFounded == this.pairAmount) {\r\n           
    // Wait 0.3 seconds\r\n            yield new UnityEngine_1.WaitForSeconds(0.3);\r\n           
    // Call to fhe function to show the end panel in the UIManager\r\n           
    UIManager_1.default.instance.ShowPanel(UIManager_1.UIPanel.End);\r\n           
    // Call to the function to reset the matrix\r\n            this.ResetMatrix();\r\n       
    }\r\n        // Call to fhe function ShowBlocker in the UIManager\r\n       
    UIManager_1.default.instance.ShowBlocker(false);\r\n    }\r\n}\r\nexports.default
    = GameManager;\r\n//# sourceMappingURL=data:application/json;base64,","assetPath":"Assets/FindAPair_Template/_Scripts/Managers/GameManager.ts","manifest":{"properties":[{"assembly":"mscorlib","name":"pairAmount","type":"System.Single","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[{"name":"Header","args":["\"Amount
    of pairs (min 2 / max 16)\""]},{"name":"SerializeField","args":[]}]},{"assembly":"UnityEngine.CoreModule","name":"tableParent","type":"UnityEngine.Transform","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[{"name":"Header","args":["\"References\""]},{"name":"SerializeField","args":[]}]},{"assembly":"UnityEngine.CoreModule","name":"rowPrefab","type":"UnityEngine.GameObject","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[{"name":"SerializeField","args":[]}]},{"assembly":"UnityEngine.CoreModule","name":"cardPrefab","type":"UnityEngine.GameObject","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[{"name":"SerializeField","args":[]}]},{"assembly":"mscorlib","name":"useThumbnails","type":"System.Boolean","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[{"name":"Header","args":["\"Card
    images\""]},{"name":"SerializeField","args":[]}]},{"assembly":"UnityEngine.CoreModule","name":"thumbnailsCreatorObj","type":"UnityEngine.GameObject","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[{"name":"SerializeField","args":[]}]},{"assembly":"UnityEngine.CoreModule","name":"sprites","type":"UnityEngine.Sprite[]","isArray":true,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[{"name":"SerializeField","args":[]}]},{"assembly":"mscorlib","name":"tries","type":"System.Single","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[{"name":"HideInInspector","args":[]}]},{"assembly":"mscorlib","name":"cardsCreated","type":"System.Boolean","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[{"name":"HideInInspector","args":[]}]}],"name":"GameManager","description":"","hasAnimatorMove":false},"isCompiled":true}'
  typescriptHash: 69593370c6a1fc57f9fdc4c5d6e02598
  onlyWriteTrigger: 0
