fileFormatVersion: 2
guid: 973fbf2751fb4654cb5d2f8acdb422a6
importerOverride: ZEPETO.Script.Compiler:ZEPETO.Script:TypescriptAssetImporter
ScriptedImporter:
  internalIDToNameTable: []
  externalObjects: {}
  serializedVersion: 2
  userData: 
  assetBundleName: 
  assetBundleVariant: 
  script: {fileID: -1123457745, guid: 54cf806323ffe4418a4ce4cc63fe6b9d, type: 3}
  isAssemblyDeclarations: 0
  assembly: 
  generateAllTypes: 1
  types: []
  generateWrapper: 0
  overrideWrapperTypes: 0
  wrapperTypes: []
  WrapperFilters: []
  wrapperOutputDirectory: Generated
  compiledResult: "{\"source\":\"\\\"use strict\\\";\\r\\nObject.defineProperty(exports,
    \\\"__esModule\\\", { value: true });\\r\\nconst UnityEngine_1 = require(\\\"UnityEngine\\\");\\r\\nconst
    ZEPETO_Script_1 = require(\\\"ZEPETO.Script\\\");\\r\\nconst System_Collections_Generic_1
    = require(\\\"System.Collections.Generic\\\");\\r\\nconst UICard_1 = require(\\\"../UICard\\\");\\r\\nconst
    UIManager_1 = require(\\\"./UIManager\\\");\\r\\n// This class is responsible
    for handling everything related to the gameplay of the game, calling other managers
    if necessary.\\r\\nclass GameManager extends ZEPETO_Script_1.ZepetoScriptBehaviour
    {\\r\\n    constructor() {\\r\\n        super(...arguments);\\r\\n        this.pairsFounded
    = 0;\\r\\n        this.cards = new Map();\\r\\n    }\\r\\n    SetPairAmount(amount)
    {\\r\\n        this.pairAmount = amount;\\r\\n        this.MatrixDestruction();\\r\\n       
    this.MatrixCreation();\\r\\n    }\\r\\n    GetPairAmount() {\\r\\n        return
    this.pairAmount;\\r\\n    }\\r\\n    // Awake is called when an enabled script
    instance is being loaded.\\r\\n    Awake() {\\r\\n        // Singleton pattern\\r\\n       
    if (ZEPETO_Script_1.ZepetoScriptBehaviour.op_Inequality(GameManager.instance,
    null))\\r\\n            UnityEngine_1.GameObject.Destroy(this.gameObject);\\r\\n       
    else\\r\\n            GameManager.instance = this;\\r\\n        this.selections
    = [];\\r\\n        this.rows = [];\\r\\n    }\\r\\n    Start() {\\r\\n       
    this.CardsCreation();\\r\\n        this.MatrixCreation();\\r\\n    }\\r\\n   
    CardsCreation() {\\r\\n        let counter = 0;\\r\\n        this.sprites.forEach(sprite
    => {\\r\\n            this.cards.set(counter, sprite);\\r\\n            counter++;\\r\\n       
    });\\r\\n    }\\r\\n    ResetMatrix() {\\r\\n        const cards = this._tableParent.GetComponentsInChildren($typeof(UICard_1.default),
    true);\\r\\n        cards.forEach(card => {\\r\\n            card.SetFoundedCard(false);\\r\\n       
    });\\r\\n        this.ShuffleMatrix();\\r\\n        this.pairsFounded = 0;\\r\\n       
    this.tries = 0;\\r\\n    }\\r\\n    MatrixDestruction() {\\r\\n        for (let
    i = 0; i < this.rows.length; i++)\\r\\n            UnityEngine_1.GameObject.Destroy(this.rows[i]);\\r\\n   
    }\\r\\n    MatrixCreation() {\\r\\n        this.pairAmount = this.LimitPairAmount(this.pairAmount);\\r\\n       
    let width = this.DeterminateWidth();\\r\\n        let cardsToCreate = this.pairAmount
    * 2;\\r\\n        let row = this.CreateRow();\\r\\n        let rowParent = row.transform;\\r\\n       
    let x = 0;\\r\\n        let y = 0;\\r\\n        let cardId = 0;\\r\\n       
    while (cardsToCreate > 0) {\\r\\n            if (x == width && cardsToCreate
    > 0) {\\r\\n                row = this.CreateRow();\\r\\n                rowParent
    = row.transform;\\r\\n                y++;\\r\\n                x = 0;\\r\\n           
    }\\r\\n            let newCard = UnityEngine_1.GameObject.Instantiate(this._card,
    rowParent);\\r\\n            let newCardScript = newCard.GetComponent($typeof(UICard_1.default));\\r\\n           
    if ((cardsToCreate % 2) == 0 && cardsToCreate != this.pairAmount * 2)\\r\\n               
    cardId++;\\r\\n            if (cardId >= this.cards.size)\\r\\n               
    cardId = 0;\\r\\n            newCardScript.id = cardId;\\r\\n            newCardScript.showingSprite
    = this.cards.get(cardId);\\r\\n            cardsToCreate--;\\r\\n           
    x++;\\r\\n        }\\r\\n        UIManager_1.default.instance.UpdatePairsFounded(this.pairsFounded,
    this.pairAmount);\\r\\n        this.ShuffleMatrix();\\r\\n    }\\r\\n    ShuffleMatrix()
    {\\r\\n        const cards = this._tableParent.GetComponentsInChildren($typeof(UICard_1.default),
    true);\\r\\n        const cardCount = cards.length;\\r\\n        // Obtener una
    lista de \xEDndices para las cartas\\r\\n        const indices = new ($generic(System_Collections_Generic_1.List$1,
    $typeof(\\\"System.Double\\\")))();\\r\\n        for (let i = 0; i < cardCount;
    i++) {\\r\\n            indices.Add(i);\\r\\n        }\\r\\n        // Mezclar
    aleatoriamente los \xEDndices\\r\\n        for (let i = 0; i < cardCount; i++)
    {\\r\\n            const randomIndex = UnityEngine_1.Random.Range(0, indices.Count);\\r\\n           
    const currentIndex = indices.get_Item(i);\\r\\n            const randomSwapIndex
    = indices.get_Item(randomIndex);\\r\\n            // Intercambiar los sprites
    y los IDs entre las cartas\\r\\n            const tempSprite = cards[currentIndex].showingSprite;\\r\\n           
    cards[currentIndex].showingSprite = cards[randomSwapIndex].showingSprite;\\r\\n           
    cards[randomSwapIndex].showingSprite = tempSprite;\\r\\n            const tempId
    = cards[currentIndex].id;\\r\\n            cards[currentIndex].id = cards[randomSwapIndex].id;\\r\\n           
    cards[randomSwapIndex].id = tempId;\\r\\n        }\\r\\n        // cards.forEach(
    card => {\\r\\n        //     card.ShowCard( true );\\r\\n        // } );\\r\\n   
    }\\r\\n    CreateRow() {\\r\\n        let obj = UnityEngine_1.GameObject.Instantiate(this._row,
    this._tableParent);\\r\\n        this.rows.push(obj);\\r\\n        return obj;\\r\\n   
    }\\r\\n    LimitPairAmount(limit) {\\r\\n        if (limit <= 1)\\r\\n           
    limit = 2;\\r\\n        if (limit > 16)\\r\\n            limit = 16;\\r\\n       
    return limit;\\r\\n    }\\r\\n    DeterminateWidth() {\\r\\n        let width
    = 0;\\r\\n        if (this.pairAmount < 6)\\r\\n            width = this.pairAmount;\\r\\n       
    if (this.pairAmount >= 6)\\r\\n            width = this.pairAmount / 2;\\r\\n       
    if (this.pairAmount > 12)\\r\\n            width = 8;\\r\\n        width = UnityEngine_1.Mathf.RoundToInt(width);\\r\\n       
    return width;\\r\\n    }\\r\\n    SelectCard(card) {\\r\\n        this.selections.push(card);\\r\\n       
    if (this.selections.length >= 2)\\r\\n            this.StartCoroutine(this.CompareSelections());\\r\\n   
    }\\r\\n    *CompareSelections() {\\r\\n        this.tries++;\\r\\n        UIManager_1.default.instance.ShowBlocker(true);\\r\\n       
    if (this.selections[0].id == this.selections[1].id) {\\r\\n            this.selections[0].SetFoundedCard(true);\\r\\n           
    this.selections[1].SetFoundedCard(true);\\r\\n            this.pairsFounded++;\\r\\n           
    UIManager_1.default.instance.UpdatePairsFounded(this.pairsFounded, this.pairAmount);\\r\\n           
    // console.log( \\\"PairsFounded:\\\" + this.pairsFounded + \\\" of \\\" + this.pairAmount
    );\\r\\n            yield new UnityEngine_1.WaitForSeconds(1);\\r\\n           
    for (let i = 0; i <= this.selections.length; i++)\\r\\n                this.selections.pop();\\r\\n           
    this.StartCoroutine(this.CheckForWin());\\r\\n        }\\r\\n        else {\\r\\n           
    yield new UnityEngine_1.WaitForSeconds(1);\\r\\n            this.selections[0].ShowCard(false);\\r\\n           
    this.selections[1].ShowCard(false);\\r\\n            for (let i = 0; i <= this.selections.length;
    i++)\\r\\n                this.selections.pop();\\r\\n            UIManager_1.default.instance.ShowBlocker(false);\\r\\n       
    }\\r\\n    }\\r\\n    *CheckForWin() {\\r\\n        if (this.pairsFounded ==
    this.pairAmount) {\\r\\n            yield new UnityEngine_1.WaitForSeconds(0.3);\\r\\n           
    UIManager_1.default.instance.SelectPanel(UIManager_1.UIPanel.End);\\r\\n           
    this.ResetMatrix();\\r\\n        }\\r\\n        UIManager_1.default.instance.ShowBlocker(false);\\r\\n   
    }\\r\\n}\\r\\nexports.default = GameManager;\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiR2FtZU1hbmFnZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJHYW1lTWFuYWdlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDZDQUEyRjtBQUMzRixpREFBcUQ7QUFDckQsMkVBQW9EO0FBQ3BELHNDQUErQjtBQUMvQiwyQ0FBaUQ7QUFFakQsOEhBQThIO0FBQzlILE1BQXFCLFdBQVksU0FBUSxxQ0FBcUI7SUFBOUQ7O1FBZVksaUJBQVksR0FBVyxDQUFDLENBQUM7UUFHekIsVUFBSyxHQUF3QixJQUFJLEdBQUcsRUFBa0IsQ0FBQztJQWtMbkUsQ0FBQztJQS9LRyxhQUFhLENBQUcsTUFBYztRQUMxQixJQUFJLENBQUMsVUFBVSxHQUFHLE1BQU0sQ0FBQztRQUN6QixJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztRQUN6QixJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7SUFDMUIsQ0FBQztJQUVELGFBQWE7UUFDVCxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUM7SUFDM0IsQ0FBQztJQUNELG1FQUFtRTtJQUNuRSxLQUFLO1FBQ0Qsb0JBQW9CO1FBQ3BCLElBdkNDLHFDQUFxQixDQTJNb0ksYUFBYyxDQXBLbkssV0FBVyxDQUFDLFFBQVEsRUFBSSxJQUFJO1lBQUcsd0JBQVUsQ0FBQyxPQUFPLENBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBRSxDQUFDOztZQUNyRSxXQUFXLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQztRQUVqQyxJQUFJLENBQUMsVUFBVSxHQUFHLEVBQUUsQ0FBQztRQUNyQixJQUFJLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQztJQUNuQixDQUFDO0lBRUQsS0FBSztRQUNELElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUNyQixJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7SUFDMUIsQ0FBQztJQUVELGFBQWE7UUFDVCxJQUFJLE9BQU8sR0FBVyxDQUFDLENBQUM7UUFDeEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFP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\",\"assetPath\":\"Assets/MainProject/_Scripts/Managers/GameManager.ts\",\"manifest\":{\"properties\":[{\"assembly\":\"mscorlib\",\"name\":\"pairAmount\",\"type\":\"System.Single\",\"isArray\":false,\"initValue\":[],\"enumKeys\":[],\"enumValues\":[],\"attributes\":[{\"name\":\"Header\",\"args\":[\"\\\"Amount
    of pairs (min 2 / max 16)\\\"\"]},{\"name\":\"SerializeField\",\"args\":[]}]},{\"assembly\":\"UnityEngine.CoreModule\",\"name\":\"_tableParent\",\"type\":\"UnityEngine.Transform\",\"isArray\":false,\"initValue\":[],\"enumKeys\":[],\"enumValues\":[],\"attributes\":[{\"name\":\"SerializeField\",\"args\":[]}]},{\"assembly\":\"UnityEngine.CoreModule\",\"name\":\"_row\",\"type\":\"UnityEngine.GameObject\",\"isArray\":false,\"initValue\":[],\"enumKeys\":[],\"enumValues\":[],\"attributes\":[{\"name\":\"SerializeField\",\"args\":[]}]},{\"assembly\":\"UnityEngine.CoreModule\",\"name\":\"_card\",\"type\":\"UnityEngine.GameObject\",\"isArray\":false,\"initValue\":[],\"enumKeys\":[],\"enumValues\":[],\"attributes\":[{\"name\":\"SerializeField\",\"args\":[]}]},{\"assembly\":\"mscorlib\",\"name\":\"useThumbnails\",\"type\":\"System.Boolean\",\"isArray\":false,\"initValue\":[],\"enumKeys\":[],\"enumValues\":[],\"attributes\":[{\"name\":\"Header\",\"args\":[\"\\\"Card
    images\\\"\"]},{\"name\":\"SerializeField\",\"args\":[]}]},{\"assembly\":\"UnityEngine.CoreModule\",\"name\":\"sprites\",\"type\":\"UnityEngine.Sprite[]\",\"isArray\":true,\"initValue\":[],\"enumKeys\":[],\"enumValues\":[],\"attributes\":[{\"name\":\"SerializeField\",\"args\":[]}]},{\"assembly\":\"mscorlib\",\"name\":\"tries\",\"type\":\"System.Single\",\"isArray\":false,\"initValue\":[],\"enumKeys\":[],\"enumValues\":[],\"attributes\":[]}],\"name\":\"GameManager\",\"description\":\"\",\"hasAnimatorMove\":false},\"isCompiled\":true}"
  typescriptHash: e6829e9d088ddbfd0ec563c5ac568a2d
  onlyWriteTrigger: 0
