fileFormatVersion: 2
guid: 973fbf2751fb4654cb5d2f8acdb422a6
importerOverride: ZEPETO.Script.Compiler:ZEPETO.Script:TypescriptAssetImporter
ScriptedImporter:
  internalIDToNameTable: []
  externalObjects: {}
  serializedVersion: 2
  userData: 
  assetBundleName: 
  assetBundleVariant: 
  script: {fileID: -1123457745, guid: 54cf806323ffe4418a4ce4cc63fe6b9d, type: 3}
  isAssemblyDeclarations: 0
  assembly: 
  generateAllTypes: 1
  types: []
  generateWrapper: 0
  overrideWrapperTypes: 0
  wrapperTypes: []
  WrapperFilters: []
  wrapperOutputDirectory: Generated
  compiledResult: "{\"source\":\"\\\"use strict\\\";\\r\\nObject.defineProperty(exports,
    \\\"__esModule\\\", { value: true });\\r\\nconst UnityEngine_1 = require(\\\"UnityEngine\\\");\\r\\nconst
    ZEPETO_Script_1 = require(\\\"ZEPETO.Script\\\");\\r\\nconst System_Collections_Generic_1
    = require(\\\"System.Collections.Generic\\\");\\r\\nconst UICard_1 = require(\\\"../UICard\\\");\\r\\n//
    This class is responsible for handling everything related to the gameplay of
    the game, calling other managers if necessary.\\r\\nclass GameManager extends
    ZEPETO_Script_1.ZepetoScriptBehaviour {\\r\\n    constructor() {\\r\\n       
    super(...arguments);\\r\\n        this.cards = new Map();\\r\\n    }\\r\\n   
    // Awake is called when an enabled script instance is being loaded.\\r\\n   
    Awake() {\\r\\n        // Singleton pattern\\r\\n        if (ZEPETO_Script_1.ZepetoScriptBehaviour.op_Inequality(GameManager.instance,
    null))\\r\\n            UnityEngine_1.GameObject.Destroy(this.gameObject);\\r\\n       
    else\\r\\n            GameManager.instance = this;\\r\\n        this.selections
    = [];\\r\\n    }\\r\\n    Start() {\\r\\n        this.CardsCreation();\\r\\n       
    this.MatrixCreation();\\r\\n    }\\r\\n    CardsCreation() {\\r\\n        let
    counter = 0;\\r\\n        this.sprites.forEach(sprite => {\\r\\n            this.cards.set(counter,
    sprite);\\r\\n            counter++;\\r\\n        });\\r\\n    }\\r\\n    MatrixCreation()
    {\\r\\n        this.LimitPairAmount();\\r\\n        let width = this.DeterminateWidth();\\r\\n       
    let cardsToCreate = this.pairAmount * 2;\\r\\n        let row = this.CreateRow();\\r\\n       
    let rowParent = row.transform;\\r\\n        let x = 0;\\r\\n        let y = 0;\\r\\n       
    let cardId = 0;\\r\\n        while (cardsToCreate > 0) {\\r\\n            if
    (x == width && cardsToCreate > 0) {\\r\\n                row = this.CreateRow();\\r\\n               
    rowParent = row.transform;\\r\\n                y++;\\r\\n                x =
    0;\\r\\n            }\\r\\n            let newCard = UnityEngine_1.GameObject.Instantiate(this._card,
    rowParent);\\r\\n            let newCardScript = newCard.GetComponent($typeof(UICard_1.default));\\r\\n           
    if ((cardsToCreate % 2) == 0 && cardsToCreate != this.pairAmount * 2)\\r\\n               
    cardId++;\\r\\n            if (cardId >= this.cards.size)\\r\\n               
    cardId = 0;\\r\\n            newCardScript.id = cardId;\\r\\n            newCardScript.showingSprite
    = this.cards.get(cardId);\\r\\n            cardsToCreate--;\\r\\n           
    x++;\\r\\n        }\\r\\n        this.ShuffleMatrix();\\r\\n    }\\r\\n    ShuffleMatrix()
    {\\r\\n        console.log(\\\"Shuffle matrix\\\");\\r\\n        // Obtener todas
    las cartas en la matriz\\r\\n        const cards = this._tableParent.GetComponentsInChildren($typeof(UICard_1.default),
    true);\\r\\n        // Generar una lista de \xEDndices para las cartas\\r\\n       
    const indices = new ($generic(System_Collections_Generic_1.List$1, $typeof(\\\"System.Double\\\")))();\\r\\n       
    for (let i = 0; i < cards.length; i++) {\\r\\n            indices.Add(i);\\r\\n       
    }\\r\\n        // Cambiar aleatoriamente la posici\xF3n de las cartas intercambiando
    sus \xEDndices\\r\\n        for (let i = 0; i < cards.length; i++) {\\r\\n           
    const randomIndex = UnityEngine_1.Mathf.FloorToInt(UnityEngine_1.Random.Range(0,
    indices.Count));\\r\\n            const currentIndex = indices.get_Item(i);\\r\\n           
    const randomSwapIndex = indices.get_Item(randomIndex);\\r\\n            // Intercambiar
    las posiciones en la matriz\\r\\n            const tempPosition = cards[currentIndex].transform.position;\\r\\n           
    cards[currentIndex].transform.position = cards[randomSwapIndex].transform.position;\\r\\n           
    cards[randomSwapIndex].transform.position = tempPosition;\\r\\n            //
    Intercambiar los \xEDndices en la lista\\r\\n            indices.set_Item(i,
    randomSwapIndex);\\r\\n            indices.set_Item(randomIndex, currentIndex);\\r\\n       
    }\\r\\n    }\\r\\n    CreateRow() {\\r\\n        let obj = UnityEngine_1.GameObject.Instantiate(this._row,
    this._tableParent);\\r\\n        return obj;\\r\\n    }\\r\\n    LimitPairAmount()
    {\\r\\n        if (this.pairAmount <= 1)\\r\\n            this.pairAmount = 2;\\r\\n       
    if (this.pairAmount > 16)\\r\\n            this.pairAmount = 16;\\r\\n    }\\r\\n   
    DeterminateWidth() {\\r\\n        let width = 0;\\r\\n        if (this.pairAmount
    < 6)\\r\\n            width = this.pairAmount;\\r\\n        if (this.pairAmount
    > 6)\\r\\n            width = this.pairAmount / 2;\\r\\n        if (this.pairAmount
    > 12)\\r\\n            width = 8;\\r\\n        return width;\\r\\n    }\\r\\n   
    SelectCard(card) {\\r\\n        this.selections.push(card);\\r\\n        card.ShowCard(true);\\r\\n       
    if (this.selections.length >= 2)\\r\\n            this.StartCoroutine(this.CompareSelections());\\r\\n   
    }\\r\\n    *CompareSelections() {\\r\\n        if (this.selections[0].id == this.selections[1].id)\\r\\n           
    console.log(\\\"Son iguales!\\\");\\r\\n        else\\r\\n            console.log(\\\"Son
    diferentes!\\\");\\r\\n        yield new UnityEngine_1.WaitForSeconds(1);\\r\\n       
    this.selections[0].ShowCard(false);\\r\\n        this.selections[1].ShowCard(false);\\r\\n       
    for (let i = 0; i <= this.selections.length; i++)\\r\\n            this.selections.pop();\\r\\n   
    }\\r\\n}\\r\\nexports.default = GameManager;\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiR2FtZU1hbmFnZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJHYW1lTWFuYWdlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDZDQUEyRjtBQUMzRixpREFBcUQ7QUFDckQsMkVBQW9EO0FBQ3BELHNDQUErQjtBQUUvQiw4SEFBOEg7QUFDOUgsTUFBcUIsV0FBWSxTQUFRLHFDQUFxQjtJQUE5RDs7UUFnQlksVUFBSyxHQUF3QixJQUFJLEdBQUcsRUFBa0IsQ0FBQztJQThIbkUsQ0FBQztJQTNIRyxtRUFBbUU7SUFDbkUsS0FBSztRQUNELG9CQUFvQjtRQUNwQixJQTNCQyxxQ0FBcUIsQ0FvSnEvRCxhQUFjLENBekhwaEUsV0FBVyxDQUFDLFFBQVEsRUFBSSxJQUFJO1lBQUcsd0JBQVUsQ0FBQyxPQUFPLENBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBRSxDQUFDOztZQUNyRSxXQUFXLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQztRQUVqQyxJQUFJLENBQUMsVUFBVSxHQUFHLEVBQUUsQ0FBQztJQUN6QixDQUFDO0lBRUQsS0FBSztRQUNELElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUNyQixJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7SUFDMUIsQ0FBQztJQUVELGFBQWE7UUFDVCxJQUFJLE9BQU8sR0FBVyxDQUFDLENBQUM7UUFDeEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUUsTUFBTSxDQUFDLEVBQUU7WUFDM0IsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUUsT0FBTyxFQUFFLE1BQU0sQ0FBRSxDQUFDO1lBQ2xDLE9BQU8sRUFBRSxDQUFDO1FBQ2QsQ0FBQyxDQUFFLENBQUM7SUFDUixDQUFDO0lBRUQsY0FBYztRQUNWLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztRQUV2QixJQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztRQUVwQyxJQUFJLGFBQWEsR0FBVyxJQUFJLENBQUMsVUFB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\",\"assetPath\":\"Assets/MainProject/_Scripts/Managers/GameManager.ts\",\"manifest\":{\"properties\":[{\"assembly\":\"mscorlib\",\"name\":\"pairAmount\",\"type\":\"System.Single\",\"isArray\":false,\"initValue\":[],\"enumKeys\":[],\"enumValues\":[],\"attributes\":[{\"name\":\"Header\",\"args\":[\"\\\"Amount
    of pairs (min 2 / max 16)\\\"\"]},{\"name\":\"SerializeField\",\"args\":[]}]},{\"assembly\":\"UnityEngine.CoreModule\",\"name\":\"_tableParent\",\"type\":\"UnityEngine.Transform\",\"isArray\":false,\"initValue\":[],\"enumKeys\":[],\"enumValues\":[],\"attributes\":[{\"name\":\"SerializeField\",\"args\":[]}]},{\"assembly\":\"UnityEngine.CoreModule\",\"name\":\"_row\",\"type\":\"UnityEngine.GameObject\",\"isArray\":false,\"initValue\":[],\"enumKeys\":[],\"enumValues\":[],\"attributes\":[{\"name\":\"SerializeField\",\"args\":[]}]},{\"assembly\":\"UnityEngine.CoreModule\",\"name\":\"_card\",\"type\":\"UnityEngine.GameObject\",\"isArray\":false,\"initValue\":[],\"enumKeys\":[],\"enumValues\":[],\"attributes\":[{\"name\":\"SerializeField\",\"args\":[]}]},{\"assembly\":\"mscorlib\",\"name\":\"useThumbnails\",\"type\":\"System.Boolean\",\"isArray\":false,\"initValue\":[],\"enumKeys\":[],\"enumValues\":[],\"attributes\":[{\"name\":\"Header\",\"args\":[\"\\\"Card
    images\\\"\"]},{\"name\":\"SerializeField\",\"args\":[]}]},{\"assembly\":\"UnityEngine.CoreModule\",\"name\":\"sprites\",\"type\":\"UnityEngine.Sprite[]\",\"isArray\":true,\"initValue\":[],\"enumKeys\":[],\"enumValues\":[],\"attributes\":[{\"name\":\"SerializeField\",\"args\":[]}]}],\"name\":\"GameManager\",\"description\":\"\",\"hasAnimatorMove\":false},\"isCompiled\":true}"
  typescriptHash: 8c659f3e1c080b96d0dacb3238a3190a
  onlyWriteTrigger: 0
